{% set command_name = 'Create' + file.class_name + 'Command' %}
{% set command_handler = command_name + 'Handler' %}
using System.Threading;
using System.Threading.Tasks;
using AutoMapper;
using {{ mediator_lib }};
using {{ file.solution_name }}.Application.Common.Interfaces;
using {{ file.namespace.name }};

namespace {{ target_namespace }};

/// <summary>
/// Команда создания сущности "{{ file.class_summary }}"
/// </summary>
public class {{ command_name }} : IRequest<long>
{
    /// <summary>
    /// Объект передачи данных
    /// </summary>
    public {{ file.class_name }}Dto Dto { get; set; }
}

public class {{ command_handler }} : IRequestHandler<{{ command_name }}, long>
{
    private readonly IApplicationDbContext _context;
    private readonly IMapper _mapper;

    public {{ command_handler }}(IApplicationDbContext context, IMapper mapper)
    {
        _context = context;
        _mapper = mapper;
    }

    public async {{ return_value }}<long> Handle({{ command_name }} request, CancellationToken cancellationToken)
    {
        var entity = _mapper.Map<{{ file.class_name }}>(request.Dto);

        _context.{{ file.pluralized_class_name }}.Add(entity);

        await _context.SaveChangesAsync(cancellationToken);

        return entity.Id;
    }
}
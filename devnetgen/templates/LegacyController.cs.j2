using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using DevExtreme.AspNet.Data.ResponseModel;
using DevExtreme.AspNet.Mvc;
using {{ file.solution_name }}.WebUI.Controllers.Common;
using {{ file.solution_name }}.WebUI.Utils.Helpers;
using {{ file.solution_name }}.WebUI.Models;
{% for namespace in command_namespaces %}
using {{ namespace.name }};
{% endfor %}
using CreateDto = {{ create_namespace.name }}.{{ file.class_name }}Dto;
using UpdateDto = {{ update_namespace.name }}.{{ file.class_name }}Dto;
using GetVm = {{ get_namespace.name }}.{{ file.class_name }}Vm;
using GetListVm = {{ get_list_namespace.name }}.{{ file.class_name }}Vm;

namespace {{ target_namespace }};

/// <summary>
/// Контроллер для работы с сущностью "{{ file.class_summary }}"
/// </summary>
[Authorize]
public class {{ file.class_name }}Controller : MediatorController
{
    /// <summary>
    /// Метод получения сущности "{{ file.class_summary }}"
    /// </summary>
    /// <param name="id">Идентификатор сущности</param>
    /// <returns>Модель отображения сущности</returns>
    [HttpGet]
    public async Task<GetVm> Get(long id)
        => await Mediator.Send(new {{ get_namespace.last_name_part }}Query { Id = id });

    /// <summary>
    /// Метод получения списка сущностей "{{ file.class_summary }}"
    /// </summary>
    /// <returns>Список сущностей</returns>
    [HttpGet]
    public async Task<IList<GetListVm>> GetList()
        => await Mediator.Send(new {{ get_list_namespace.last_name_part }}Query());

    /// <summary>
    /// Метод получения таблицы сущностей "{{ file.class_summary }}"
    /// </summary>
    /// <param name="loadOptions">Параметры для загрузки таблицы</param>
    /// <returns>Данные для подстановки в таблицу</returns>
    [HttpPost]
    public async Task<LoadResult> GetGrid(DataSourceLoadOptions loadOptions)
        => await Mediator.Send(new {{ get_grid_namespace.last_name_part }}Query { LoadOptions = loadOptions });

    /// <summary>
    /// Метод создания сущности "{{ file.class_summary }}"
    /// </summary>
    /// <param name="dto">Объект передачи данных</param>
    /// <returns>Идентификатор новой записи</returns>
    [HttpPost]
    public async Task<ResultWithError<long>> Create([FromBody] CreateDto dto)
    {
        var command = new {{ create_namespace.last_name_part }}Command { Dto = dto };
        var result = await ControllerHelper.GetResultWithErrorAsync(
                async() => await Mediator.Send(command));

        return result;
    }

    /// <summary>
    /// Метод редактирования сущности "{{ file.class_summary }}"
    /// </summary>
    /// <param name="dto">Объект передачи данных</param>
    [HttpPut]
    public async Task<ResultWithError> Update([FromBody] UpdateDto dto)
    {
        var command = new {{ update_namespace.last_name_part }}Command { Dto = dto };
        var result = await ControllerHelper.GetResultWithErrorAsync(
                async() => { await Mediator.Send(command); });

        return result;
    }

    /// <summary>
    /// Метод удаления сущности "{{ file.class_summary }}"
    /// </summary>
    /// <param name="id">Идентификатор сущности</param>
    [HttpDelete]
    public async Task<ResultWithError> Delete(long id)
    {
        var command = new {{ delete_namespace.last_name_part }}Command { Id = id };
        var result = await ControllerHelper.GetResultWithErrorAsync(
                async() => { await Mediator.Send(command); });

        return result;
    }
}
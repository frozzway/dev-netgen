{% set class_name = 'Update' + entity.class_name + 'CommandTests' %}
{% set command_name = 'Update' + entity.class_name + 'Command' %}
{% set success_test_name = 'ShouldUpdate' + entity.class_name %}
{% set dto_class = entity.class_name + 'Dto' %}
using {{ update_namespace.name }};
using {{ entity.namespace.name }};

namespace {{ target_namespace }};

using static Testing;

/// <summary>
/// Тесты для команды редактирования сущности "{{ entity.class_summary }}"
/// </summary>
public class {{ class_name }} : {{ entity.class_name }}Base
{
    [Test]
    public async Task {{ success_test_name }}()
    {
        var entity = await Create{{ entity.class_name }}OnDb();

        var dto = Fixture.Build<{{ dto_class }}>()
            .With(x => x.Id, entity.Id)
            .Create();

        // Act
        await RunAsDefaultUserAsync();
        var command = new {{ command_name }} { Dto = dto };
        await FluentActions.Invoking(async () => await SendAsync(command)).Should().NotThrowAsync();
        var item = await FindAsync<{{ entity.class_name }}>(entity.Id);

        // Assert
        item.Should().NotBeNull();
        item!.Id.Should().NotBe(null);
        dto.Should().BeEquivalentTo(item);
    }
}
{% set class_name = 'Create' + entity.class_name + 'Tests' %}
{% set command_name = 'Create' + entity.class_name + 'Command' %}
{% set success_test_name = 'ShouldCreate' + entity.class_name %}
{% set dto_class = entity.class_name + 'Dto' %}
{% set validation_testcases_name = 'Create' + entity.class_name + 'TestCases' %}
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using AutoFixture;
using FluentAssertions;
using NUnit.Framework;
using {{ entity.solution_name }}.Application.Common.Exceptions;
using {{ entity.namespace.name }};

namespace {{ target_namespace }};

using static Testing;

/// <summary>
/// Тесты для команды создания сущности "{{ entity.class_summary }}"
/// </summary>
public class {{ class_name }} : TestBase
{
    /// <summary>
    /// Тест для команды создания сущности "{{ entity.class_summary }}"
    /// </summary>
    [Test]
    public async Task {{ success_test_name }}()
    {
        var fixture = new Fixture();
        var dto = fixture.Build<{{ dto_class }}>()
            .Create();

        var command = new {{ command_name }} { Dto = dto };
        var itemId = await FluentActions.Invoking(async () => await SendAsync(command))
            .Should().NotThrowAsync();

        var entity = await FindAsync<{{ entity.class_name }}>(itemId);

        entity.Should().NotBeNull();
        entity!.Id.Should().NotBe(null);
        dto.Should().BeEquivalentTo(entity, options => options
            .IncludingAllDeclaredProperties()
            .ExcludingNestedObjects()
            .Excluding(i => i.Id));
    }

    [TestCaseSource(nameof({{ validation_testcases_name }}))]
    public async Task ShouldThrowValidationException({{ dto_class }} dto)
    {
        var command = new {{ command_name }} { Dto = dto };

        await FluentActions.Invoking(() =>
            SendAsync(command)).Should().ThrowAsync<ValidationException>();
    }

    private static IEnumerable<TestCaseData> {{ validation_testcases_name }}()
    {
        var fixture = new Fixture();

        {% for p in entity.validation_properties %}
        {% if loop.index >= 2 %}

        {% endif %}
        {% if not p.is_nullable %}
        yield return new TestCaseData(
                fixture.Build<{{ dto_class }}>()
                    .With(i => i.{{ p.name }}, ({{ p.prop_type }})null)
                    .Create())
            .SetName("{{ p.name }} is null");
        {% endif %}
        {% endfor %}
    }
}
